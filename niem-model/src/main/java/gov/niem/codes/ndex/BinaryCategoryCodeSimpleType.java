//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.12.27 at 06:04:33 PM EST 
//


package gov.niem.codes.ndex;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for BinaryCategoryCodeSimpleType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="BinaryCategoryCodeSimpleType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token"&gt;
 *     &lt;enumeration value="AUDIO"/&gt;
 *     &lt;enumeration value="DOCUMENT"/&gt;
 *     &lt;enumeration value="DOCUMENT_APPROVED_TELEPHONE_LIST"/&gt;
 *     &lt;enumeration value="DOCUMENT_EMAIL_MESSAGE"/&gt;
 *     &lt;enumeration value="DOCUMENT_EMAIL_USAGE_LOG"/&gt;
 *     &lt;enumeration value="DOCUMENT_IDENTIFICATION"/&gt;
 *     &lt;enumeration value="DOCUMENT_PHONE_PEN_REGISTER"/&gt;
 *     &lt;enumeration value="DOCUMENT_TELEPHONE_CALL_LOG"/&gt;
 *     &lt;enumeration value="DOCUMENT_TELEPHONE_CALL_REQUEST_LIST"/&gt;
 *     &lt;enumeration value="DOCUMENT_TEXTING_MESSAGE"/&gt;
 *     &lt;enumeration value="DOCUMENT_VISITOR_LOG"/&gt;
 *     &lt;enumeration value="DOCUMENT_VISITOR_REQUEST_LIST"/&gt;
 *     &lt;enumeration value="IMAGE"/&gt;
 *     &lt;enumeration value="IMAGE_AERIAL_PHOTO"/&gt;
 *     &lt;enumeration value="IMAGE_BIOMETRIC"/&gt;
 *     &lt;enumeration value="IMAGE_BIOMETRIC_DNA"/&gt;
 *     &lt;enumeration value="IMAGE_BIOMETRIC_FINGERPRINT"/&gt;
 *     &lt;enumeration value="IMAGE_CHILD_PORNOGRAPHY_PHOTO"/&gt;
 *     &lt;enumeration value="IMAGE_CRIMINAL_JUSTICE_PHOTO"/&gt;
 *     &lt;enumeration value="IMAGE_DRIVER_LICENSE_PHOTO"/&gt;
 *     &lt;enumeration value="IMAGE_EXAMPLE_PHOTO"/&gt;
 *     &lt;enumeration value="IMAGE_MEDICAL_PHOTO"/&gt;
 *     &lt;enumeration value="IMAGE_MUG_SHOT"/&gt;
 *     &lt;enumeration value="IMAGE_PHYSICAL_FEATURE"/&gt;
 *     &lt;enumeration value="IMAGE_POLICE_SKETCH"/&gt;
 *     &lt;enumeration value="IMAGE_PORTRAIT"/&gt;
 *     &lt;enumeration value="IMAGE_PROPERTY_ITEM"/&gt;
 *     &lt;enumeration value="IMAGE_SNAPSHOT"/&gt;
 *     &lt;enumeration value="MALWARE"/&gt;
 *     &lt;enumeration value="OTHER"/&gt;
 *     &lt;enumeration value="VIDEO"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "BinaryCategoryCodeSimpleType", namespace = "http://release.niem.gov/niem/codes/ndex/5.0/")
@XmlEnum
public enum BinaryCategoryCodeSimpleType {


    /**
     * AUDIO (DESCRIBE OBJECT)
     * 
     */
    AUDIO,

    /**
     * DOCUMENT (DESCRIBE OBJECT)
     * 
     */
    DOCUMENT,

    /**
     * DOCUMENT APPROVED TELEPHONE LIST
     * 
     */
    DOCUMENT_APPROVED_TELEPHONE_LIST,

    /**
     * DOCUMENT EMAIL MESSAGE, INCLUDES EMAIL ATTACHMENT (DESCRIBE OBJECT)
     * 
     */
    DOCUMENT_EMAIL_MESSAGE,

    /**
     * DOCUMENT EMAIL USAGE LOG
     * 
     */
    DOCUMENT_EMAIL_USAGE_LOG,

    /**
     * DOCUMENT IDENTIFICATION, INCLUDES DRIVER LICENSE, PASSPORT, ETC. (DESCRIBE OBJECT)
     * 
     */
    DOCUMENT_IDENTIFICATION,

    /**
     * DOCUMENT PHONE PEN REGISTER, INCLUDES TRAP AND TRACE RECORDS
     * 
     */
    DOCUMENT_PHONE_PEN_REGISTER,

    /**
     * DOCUMENT TELEPHONE CALL LOG
     * 
     */
    DOCUMENT_TELEPHONE_CALL_LOG,

    /**
     * DOCUMENT TELEPHONE CALL REQUEST LIST
     * 
     */
    DOCUMENT_TELEPHONE_CALL_REQUEST_LIST,

    /**
     * DOCUMENT TEXTING MESSAGE (DESCRIBE OBJECT)
     * 
     */
    DOCUMENT_TEXTING_MESSAGE,

    /**
     * DOCUMENT VISITOR LOG
     * 
     */
    DOCUMENT_VISITOR_LOG,

    /**
     * DOCUMENT VISITOR REQUEST LIST
     * 
     */
    DOCUMENT_VISITOR_REQUEST_LIST,

    /**
     * IMAGE - PHOTO, SKETCH, PORTRAIT, SNAPSHOT, ETC., EXCLUDING DOCUMENTS, AUDIO, VIDEO (DESCRIBE OBJECT)
     * 
     */
    IMAGE,

    /**
     * AERIAL PHOTO (DESCRIBE OBJECT)
     * 
     */
    IMAGE_AERIAL_PHOTO,

    /**
     * IMAGE BIOMETRIC (DESCRIBE OBJECT)
     * 
     */
    IMAGE_BIOMETRIC,

    /**
     * IMAGE BIOMETRIC DNA
     * 
     */
    IMAGE_BIOMETRIC_DNA,

    /**
     * IMAGE BIOMETRIC FINGERPRINT
     * 
     */
    IMAGE_BIOMETRIC_FINGERPRINT,

    /**
     * IMAGE CHILD PORNOGRAPHY PHOTO
     * 
     */
    IMAGE_CHILD_PORNOGRAPHY_PHOTO,

    /**
     * CRIMINAL JUSTICE PHOTO - PHOTO TAKEN BY CRIMINAL JUSTICE AGENCY (DESCRIBE OBJECT)
     * 
     */
    IMAGE_CRIMINAL_JUSTICE_PHOTO,

    /**
     * PERSON DRIVER LICENSE PHOTO
     * 
     */
    IMAGE_DRIVER_LICENSE_PHOTO,

    /**
     * EXAMPLE PHOTO - PROVIDED AS REPRESENTATION FOR REFERENCE (DESCRIBE REFERENCE CONTEXT)
     * 
     */
    IMAGE_EXAMPLE_PHOTO,

    /**
     * MEDICAL PHOTO OF A PERSON (INCLUDING X-RAY AND MEDICAL PROCEDURE PHOTOS) - DOCTOR, DENTIST, ETC. CAPTURED PHOTO (DESCRIBE OBJECT)
     * 
     */
    IMAGE_MEDICAL_PHOTO,

    /**
     * MUG SHOT ALSO CALLED BOOKING PHOTO - LAW ENFORCEMENT PHOTO TAKEN OF A PERSON AT TIME OF BOOKING
     * 
     */
    IMAGE_MUG_SHOT,

    /**
     * PHYSICAL FEATURE IMAGE, INCLUDING PHOTO OF SCARS, MARKS, AND TATTOOS (DESCRIBE OBJECT)
     * 
     */
    IMAGE_PHYSICAL_FEATURE,

    /**
     * POLICE SKETCH (DESCRIBE OBJECT)
     * 
     */
    IMAGE_POLICE_SKETCH,

    /**
     * PORTRAIT - PAINTING OR PHOTOGRAPH OF A PERSON OR ANIMAL ESP. OF THE FACE
     * 
     */
    IMAGE_PORTRAIT,

    /**
     * IMAGE PROPERTY ITEM (DESCRIBE OBJECT)
     * 
     */
    IMAGE_PROPERTY_ITEM,

    /**
     * SNAPSHOT ALSO CALLED CANDID PHOTO - INFORMAL PHOTO (DESCRIBE OBJECT)
     * 
     */
    IMAGE_SNAPSHOT,

    /**
     * MALWARE - VIRUS, WORM, TROJAN, ETC. (DESCRIBE OBJECT)
     * 
     */
    MALWARE,

    /**
     * OTHER (DESCRIBE OBJECT)
     * 
     */
    OTHER,

    /**
     * VIDEO (DESCRIBE OBJECT)
     * 
     */
    VIDEO;

    public String value() {
        return name();
    }

    public static BinaryCategoryCodeSimpleType fromValue(String v) {
        return valueOf(v);
    }

}
